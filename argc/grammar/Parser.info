-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Parser.y
-----------------------------------------------------------------------------

state 29 contains 7 reduce/reduce conflicts.

terminal TYPE is unused
terminal VIEW is unused
terminal '<-' is unused
terminal '}' is unused
terminal '{' is unused
terminal ']' is unused
terminal '[' is unused
terminal ';' is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> prog                               (0)
	prog -> body                                       (1)
	body -> body decl                                  (2)
	body -> decl                                       (3)
	indentedBody -> INDENT body DEDENT                 (4)
	indentedBody ->                                    (5)
	decl -> def                                        (6)
	decl -> typesig                                    (7)
	decl -> instance                                   (8)
	decl -> class                                      (9)
	decl -> data                                       (10)
	def -> VAR exprlist '=' rhs                        (11)
	def -> VAR '=' rhs                                 (12)
	def -> single OP single '=' rhs                    (13)
	rhs -> expr NEWLINE                                (14)
	rhs -> NEWLINE INDENT expr NEWLINE DEDENT          (15)
	exprlistAux -> single                              (16)
	exprlistAux -> exprlistAux single                  (17)
	exprlist -> exprlistAux                            (18)
	expr -> lambda                                     (19)
	lambda -> singlelambda                             (20)
	singlelambda -> exprlist '=>' expr                 (21)
	singlelambda -> rightoper                          (22)
	rightoper -> oper OPR rightoper                    (23)
	rightoper -> oper                                  (24)
	oper -> oper OP app                                (25)
	oper -> app                                        (26)
	app -> single                                      (27)
	app -> app single                                  (28)
	single -> '(' expr ')'                             (29)
	single -> '(' OP ')'                               (30)
	single -> VAR                                      (31)
	single -> INT                                      (32)
	single -> CHAR                                     (33)
	single -> STRING                                   (34)
	single -> FLOAT                                    (35)
	single -> '_'                                      (36)
	varlistAux -> varlistAux VAR                       (37)
	varlistAux -> VAR                                  (38)
	varlist -> varlistAux                              (39)
	typesig -> VAR typeannotation NEWLINE              (40)
	typesig -> '(' OP ')' typeannotation NEWLINE       (41)
	typeannotation -> ':' constrainedtype              (42)
	constraintlist -> constraint ',' constraintlist    (43)
	constraintlist -> constraint                       (44)
	constraint -> varlist                              (45)
	constrainedtype -> type                            (46)
	constrainedtype -> type ',' constraintlist '=>' type   (47)
	constrainedtype -> type '=>' type                  (48)
	type -> ftype                                      (49)
	ftype -> typeopr '->' ftype                        (50)
	ftype -> typeopr                                   (51)
	typeopr -> typeop OPR typeopr                      (52)
	typeopr -> typeop                                  (53)
	typeop -> typeop OP typeapp                        (54)
	typeop -> typeapp                                  (55)
	typeapp -> typelist                                (56)
	typelistAux -> typelistAux singletype              (57)
	typelistAux -> singletype                          (58)
	typelist -> typelistAux                            (59)
	singletype -> '(' type ')'                         (60)
	singletype -> VAR                                  (61)
	singletype -> '(' ')'                              (62)
	instance -> INSTANCE constrainedtype NEWLINE indentedBody   (63)
	class -> CLASS constrainedtype NEWLINE indentedBody   (64)
	data -> DATA varlist datarhs                       (65)
	datarhs -> '=' constructorsS                       (66)
	datarhs -> NEWLINE INDENT '=' constructorsS DEDENT   (67)
	datarhs -> NEWLINE INDENT gadtconstructors DEDENT   (68)
	constructorsS -> NEWLINE INDENT constructorsB NEWLINE '|' constructorsS DEDENT   (69)
	constructorsS -> NEWLINE INDENT constructorsB NEWLINE INDENT '|' constructorsS DEDENT DEDENT   (70)
	constructorsS -> NEWLINE INDENT constructorsB NEWLINE DEDENT   (71)
	constructorsS -> constructorsB NEWLINE INDENT '|' constructorsS DEDENT   (72)
	constructorsS -> constructorsB NEWLINE '|' constructorsS   (73)
	constructorsS -> constructorsB NEWLINE             (74)
	constructorsB -> constructorsB '|' variant         (75)
	constructorsB -> variant                           (76)
	variant -> VAR typelist                            (77)
	variant -> VAR                                     (78)
	gadtconstructors -> gadtconstructor                (79)
	gadtconstructors -> gadtconstructors gadtconstructor   (80)
	gadtconstructor -> typesig                         (81)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	VAR            { Tident $$ }
	OP             { Toperator $$ }
	OPR            { Troperator $$ }
	CLASS          { Tkeyword "class" }
	DATA           { Tkeyword "data" }
	TYPE           { Tkeyword "type" }
	INSTANCE       { Tkeyword "instance" }
	VIEW           { Tkeyword "view" }
	'|'            { Tpipe }
	':'            { Tcolon }
	'='            { Tequals }
	'->'           { Trarrow }
	'<-'           { Tlarrow }
	'=>'           { Tfatrarrow }
	')'            { Trparen }
	'('            { Tlparen }
	'}'            { Trcurly }
	'{'            { Tlcurly }
	']'            { Trbracket }
	'['            { Tlbracket }
	','            { Tcomma }
	';'            { Tsemicolon }
	'_'            { Tunderscore }
	INDENT         { Tindent }
	DEDENT         { Tdedent }
	NEWLINE        { Tnewline }
	INT            { TintLiteral $$ }
	CHAR           { TcharLiteral $$ }
	STRING         { TstringLiteral $$ }
	FLOAT          { TfloatLiteral $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	prog            rule  1
	body            rules 2, 3
	indentedBody    rules 4, 5
	decl            rules 6, 7, 8, 9, 10
	def             rules 11, 12, 13
	rhs             rules 14, 15
	exprlistAux     rules 16, 17
	exprlist        rule  18
	expr            rule  19
	lambda          rule  20
	singlelambda    rules 21, 22
	rightoper       rules 23, 24
	oper            rules 25, 26
	app             rules 27, 28
	single          rules 29, 30, 31, 32, 33, 34, 35, 36
	varlistAux      rules 37, 38
	varlist         rule  39
	typesig         rules 40, 41
	typeannotation  rule  42
	constraintlist  rules 43, 44
	constraint      rule  45
	constrainedtype rules 46, 47, 48
	type            rule  49
	ftype           rules 50, 51
	typeopr         rules 52, 53
	typeop          rules 54, 55
	typeapp         rule  56
	typelistAux     rules 57, 58
	typelist        rule  59
	singletype      rules 60, 61, 62
	instance        rule  63
	class           rule  64
	data            rule  65
	datarhs         rules 66, 67, 68
	constructorsS   rules 69, 70, 71, 72, 73, 74
	constructorsB   rules 75, 76
	variant         rules 77, 78
	gadtconstructors rules 79, 80
	gadtconstructor rule  81

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parse -> . prog                              (rule 0)

	VAR            shift, and enter state 10
	CLASS          shift, and enter state 11
	DATA           shift, and enter state 12
	INSTANCE       shift, and enter state 13
	'('            shift, and enter state 14
	'_'            shift, and enter state 15
	INT            shift, and enter state 16
	CHAR           shift, and enter state 17
	STRING         shift, and enter state 18
	FLOAT          shift, and enter state 19

	prog           goto state 20
	body           goto state 2
	decl           goto state 3
	def            goto state 4
	single         goto state 5
	typesig        goto state 6
	instance       goto state 7
	class          goto state 8
	data           goto state 9

State 1

	prog -> . body                                      (rule 1)

	VAR            shift, and enter state 10
	CLASS          shift, and enter state 11
	DATA           shift, and enter state 12
	INSTANCE       shift, and enter state 13
	'('            shift, and enter state 14
	'_'            shift, and enter state 15
	INT            shift, and enter state 16
	CHAR           shift, and enter state 17
	STRING         shift, and enter state 18
	FLOAT          shift, and enter state 19

	body           goto state 2
	decl           goto state 3
	def            goto state 4
	single         goto state 5
	typesig        goto state 6
	instance       goto state 7
	class          goto state 8
	data           goto state 9

State 2

	prog -> body .                                      (rule 1)
	body -> body . decl                                 (rule 2)

	VAR            shift, and enter state 10
	CLASS          shift, and enter state 11
	DATA           shift, and enter state 12
	INSTANCE       shift, and enter state 13
	'('            shift, and enter state 14
	'_'            shift, and enter state 15
	INT            shift, and enter state 16
	CHAR           shift, and enter state 17
	STRING         shift, and enter state 18
	FLOAT          shift, and enter state 19
	%eof           reduce using rule 1

	decl           goto state 54
	def            goto state 4
	single         goto state 5
	typesig        goto state 6
	instance       goto state 7
	class          goto state 8
	data           goto state 9

State 3

	body -> decl .                                      (rule 3)

	VAR            reduce using rule 3
	CLASS          reduce using rule 3
	DATA           reduce using rule 3
	INSTANCE       reduce using rule 3
	'('            reduce using rule 3
	'_'            reduce using rule 3
	DEDENT         reduce using rule 3
	INT            reduce using rule 3
	CHAR           reduce using rule 3
	STRING         reduce using rule 3
	FLOAT          reduce using rule 3
	%eof           reduce using rule 3


State 4

	decl -> def .                                       (rule 6)

	VAR            reduce using rule 6
	CLASS          reduce using rule 6
	DATA           reduce using rule 6
	INSTANCE       reduce using rule 6
	'('            reduce using rule 6
	'_'            reduce using rule 6
	DEDENT         reduce using rule 6
	INT            reduce using rule 6
	CHAR           reduce using rule 6
	STRING         reduce using rule 6
	FLOAT          reduce using rule 6
	%eof           reduce using rule 6


State 5

	def -> single . OP single '=' rhs                   (rule 13)

	OP             shift, and enter state 53


State 6

	decl -> typesig .                                   (rule 7)

	VAR            reduce using rule 7
	CLASS          reduce using rule 7
	DATA           reduce using rule 7
	INSTANCE       reduce using rule 7
	'('            reduce using rule 7
	'_'            reduce using rule 7
	DEDENT         reduce using rule 7
	INT            reduce using rule 7
	CHAR           reduce using rule 7
	STRING         reduce using rule 7
	FLOAT          reduce using rule 7
	%eof           reduce using rule 7


State 7

	decl -> instance .                                  (rule 8)

	VAR            reduce using rule 8
	CLASS          reduce using rule 8
	DATA           reduce using rule 8
	INSTANCE       reduce using rule 8
	'('            reduce using rule 8
	'_'            reduce using rule 8
	DEDENT         reduce using rule 8
	INT            reduce using rule 8
	CHAR           reduce using rule 8
	STRING         reduce using rule 8
	FLOAT          reduce using rule 8
	%eof           reduce using rule 8


State 8

	decl -> class .                                     (rule 9)

	VAR            reduce using rule 9
	CLASS          reduce using rule 9
	DATA           reduce using rule 9
	INSTANCE       reduce using rule 9
	'('            reduce using rule 9
	'_'            reduce using rule 9
	DEDENT         reduce using rule 9
	INT            reduce using rule 9
	CHAR           reduce using rule 9
	STRING         reduce using rule 9
	FLOAT          reduce using rule 9
	%eof           reduce using rule 9


State 9

	decl -> data .                                      (rule 10)

	VAR            reduce using rule 10
	CLASS          reduce using rule 10
	DATA           reduce using rule 10
	INSTANCE       reduce using rule 10
	'('            reduce using rule 10
	'_'            reduce using rule 10
	DEDENT         reduce using rule 10
	INT            reduce using rule 10
	CHAR           reduce using rule 10
	STRING         reduce using rule 10
	FLOAT          reduce using rule 10
	%eof           reduce using rule 10


State 10

	def -> VAR . exprlist '=' rhs                       (rule 11)
	def -> VAR . '=' rhs                                (rule 12)
	single -> VAR .                                     (rule 31)
	typesig -> VAR . typeannotation NEWLINE             (rule 40)

	VAR            shift, and enter state 30
	OP             reduce using rule 31
	':'            shift, and enter state 51
	'='            shift, and enter state 52
	'('            shift, and enter state 32
	'_'            shift, and enter state 15
	INT            shift, and enter state 16
	CHAR           shift, and enter state 17
	STRING         shift, and enter state 18
	FLOAT          shift, and enter state 19

	exprlistAux    goto state 21
	exprlist       goto state 48
	single         goto state 49
	typeannotation goto state 50

State 11

	class -> CLASS . constrainedtype NEWLINE indentedBody    (rule 64)

	VAR            shift, and enter state 42
	'('            shift, and enter state 43

	constrainedtypegoto state 47
	type           goto state 34
	ftype          goto state 35
	typeopr        goto state 36
	typeop         goto state 37
	typeapp        goto state 38
	typelistAux    goto state 39
	typelist       goto state 40
	singletype     goto state 41

State 12

	data -> DATA . varlist datarhs                      (rule 65)

	VAR            shift, and enter state 46

	varlistAux     goto state 44
	varlist        goto state 45

State 13

	instance -> INSTANCE . constrainedtype NEWLINE indentedBody    (rule 63)

	VAR            shift, and enter state 42
	'('            shift, and enter state 43

	constrainedtypegoto state 33
	type           goto state 34
	ftype          goto state 35
	typeopr        goto state 36
	typeop         goto state 37
	typeapp        goto state 38
	typelistAux    goto state 39
	typelist       goto state 40
	singletype     goto state 41

State 14

	single -> '(' . expr ')'                            (rule 29)
	single -> '(' . OP ')'                              (rule 30)
	typesig -> '(' . OP ')' typeannotation NEWLINE      (rule 41)

	VAR            shift, and enter state 30
	OP             shift, and enter state 31
	'('            shift, and enter state 32
	'_'            shift, and enter state 15
	INT            shift, and enter state 16
	CHAR           shift, and enter state 17
	STRING         shift, and enter state 18
	FLOAT          shift, and enter state 19

	exprlistAux    goto state 21
	exprlist       goto state 22
	expr           goto state 23
	lambda         goto state 24
	singlelambda   goto state 25
	rightoper      goto state 26
	oper           goto state 27
	app            goto state 28
	single         goto state 29

State 15

	single -> '_' .                                     (rule 36)

	VAR            reduce using rule 36
	OP             reduce using rule 36
	OPR            reduce using rule 36
	'='            reduce using rule 36
	'=>'           reduce using rule 36
	')'            reduce using rule 36
	'('            reduce using rule 36
	'_'            reduce using rule 36
	NEWLINE        reduce using rule 36
	INT            reduce using rule 36
	CHAR           reduce using rule 36
	STRING         reduce using rule 36
	FLOAT          reduce using rule 36


State 16

	single -> INT .                                     (rule 32)

	VAR            reduce using rule 32
	OP             reduce using rule 32
	OPR            reduce using rule 32
	'='            reduce using rule 32
	'=>'           reduce using rule 32
	')'            reduce using rule 32
	'('            reduce using rule 32
	'_'            reduce using rule 32
	NEWLINE        reduce using rule 32
	INT            reduce using rule 32
	CHAR           reduce using rule 32
	STRING         reduce using rule 32
	FLOAT          reduce using rule 32


State 17

	single -> CHAR .                                    (rule 33)

	VAR            reduce using rule 33
	OP             reduce using rule 33
	OPR            reduce using rule 33
	'='            reduce using rule 33
	'=>'           reduce using rule 33
	')'            reduce using rule 33
	'('            reduce using rule 33
	'_'            reduce using rule 33
	NEWLINE        reduce using rule 33
	INT            reduce using rule 33
	CHAR           reduce using rule 33
	STRING         reduce using rule 33
	FLOAT          reduce using rule 33


State 18

	single -> STRING .                                  (rule 34)

	VAR            reduce using rule 34
	OP             reduce using rule 34
	OPR            reduce using rule 34
	'='            reduce using rule 34
	'=>'           reduce using rule 34
	')'            reduce using rule 34
	'('            reduce using rule 34
	'_'            reduce using rule 34
	NEWLINE        reduce using rule 34
	INT            reduce using rule 34
	CHAR           reduce using rule 34
	STRING         reduce using rule 34
	FLOAT          reduce using rule 34


State 19

	single -> FLOAT .                                   (rule 35)

	VAR            reduce using rule 35
	OP             reduce using rule 35
	OPR            reduce using rule 35
	'='            reduce using rule 35
	'=>'           reduce using rule 35
	')'            reduce using rule 35
	'('            reduce using rule 35
	'_'            reduce using rule 35
	NEWLINE        reduce using rule 35
	INT            reduce using rule 35
	CHAR           reduce using rule 35
	STRING         reduce using rule 35
	FLOAT          reduce using rule 35


State 20

	%start_parse -> prog .                              (rule 0)

	%eof           accept


State 21

	exprlistAux -> exprlistAux . single                 (rule 17)
	exprlist -> exprlistAux .                           (rule 18)

	VAR            shift, and enter state 30
	'='            reduce using rule 18
	'=>'           reduce using rule 18
	'('            shift, and enter state 32
	'_'            shift, and enter state 15
	INT            shift, and enter state 16
	CHAR           shift, and enter state 17
	STRING         shift, and enter state 18
	FLOAT          shift, and enter state 19

	single         goto state 83

State 22

	singlelambda -> exprlist . '=>' expr                (rule 21)

	'=>'           shift, and enter state 82


State 23

	single -> '(' expr . ')'                            (rule 29)

	')'            shift, and enter state 81


State 24

	expr -> lambda .                                    (rule 19)

	')'            reduce using rule 19
	NEWLINE        reduce using rule 19


State 25

	lambda -> singlelambda .                            (rule 20)

	')'            reduce using rule 20
	NEWLINE        reduce using rule 20


State 26

	singlelambda -> rightoper .                         (rule 22)

	')'            reduce using rule 22
	NEWLINE        reduce using rule 22


State 27

	rightoper -> oper . OPR rightoper                   (rule 23)
	rightoper -> oper .                                 (rule 24)
	oper -> oper . OP app                               (rule 25)

	OP             shift, and enter state 79
	OPR            shift, and enter state 80
	')'            reduce using rule 24
	NEWLINE        reduce using rule 24


State 28

	oper -> app .                                       (rule 26)
	app -> app . single                                 (rule 28)

	VAR            shift, and enter state 30
	OP             reduce using rule 26
	OPR            reduce using rule 26
	')'            reduce using rule 26
	'('            shift, and enter state 32
	'_'            shift, and enter state 15
	NEWLINE        reduce using rule 26
	INT            shift, and enter state 16
	CHAR           shift, and enter state 17
	STRING         shift, and enter state 18
	FLOAT          shift, and enter state 19

	single         goto state 78

State 29

	exprlistAux -> single .                             (rule 16)
	app -> single .                                     (rule 27)

	VAR            reduce using rule 27
			(reduce using rule 16)

	OP             reduce using rule 27
	OPR            reduce using rule 27
	'=>'           reduce using rule 16
	')'            reduce using rule 27
	'('            reduce using rule 27
			(reduce using rule 16)

	'_'            reduce using rule 27
			(reduce using rule 16)

	NEWLINE        reduce using rule 27
	INT            reduce using rule 27
			(reduce using rule 16)

	CHAR           reduce using rule 27
			(reduce using rule 16)

	STRING         reduce using rule 27
			(reduce using rule 16)

	FLOAT          reduce using rule 27
			(reduce using rule 16)



State 30

	single -> VAR .                                     (rule 31)

	VAR            reduce using rule 31
	OP             reduce using rule 31
	OPR            reduce using rule 31
	'='            reduce using rule 31
	'=>'           reduce using rule 31
	')'            reduce using rule 31
	'('            reduce using rule 31
	'_'            reduce using rule 31
	NEWLINE        reduce using rule 31
	INT            reduce using rule 31
	CHAR           reduce using rule 31
	STRING         reduce using rule 31
	FLOAT          reduce using rule 31


State 31

	single -> '(' OP . ')'                              (rule 30)
	typesig -> '(' OP . ')' typeannotation NEWLINE      (rule 41)

	')'            shift, and enter state 77


State 32

	single -> '(' . expr ')'                            (rule 29)
	single -> '(' . OP ')'                              (rule 30)

	VAR            shift, and enter state 30
	OP             shift, and enter state 76
	'('            shift, and enter state 32
	'_'            shift, and enter state 15
	INT            shift, and enter state 16
	CHAR           shift, and enter state 17
	STRING         shift, and enter state 18
	FLOAT          shift, and enter state 19

	exprlistAux    goto state 21
	exprlist       goto state 22
	expr           goto state 23
	lambda         goto state 24
	singlelambda   goto state 25
	rightoper      goto state 26
	oper           goto state 27
	app            goto state 28
	single         goto state 29

State 33

	instance -> INSTANCE constrainedtype . NEWLINE indentedBody    (rule 63)

	NEWLINE        shift, and enter state 75


State 34

	constrainedtype -> type .                           (rule 46)
	constrainedtype -> type . ',' constraintlist '=>' type    (rule 47)
	constrainedtype -> type . '=>' type                 (rule 48)

	'=>'           shift, and enter state 73
	','            shift, and enter state 74
	NEWLINE        reduce using rule 46


State 35

	type -> ftype .                                     (rule 49)

	'=>'           reduce using rule 49
	')'            reduce using rule 49
	','            reduce using rule 49
	NEWLINE        reduce using rule 49


State 36

	ftype -> typeopr . '->' ftype                       (rule 50)
	ftype -> typeopr .                                  (rule 51)

	'->'           shift, and enter state 72
	'=>'           reduce using rule 51
	')'            reduce using rule 51
	','            reduce using rule 51
	NEWLINE        reduce using rule 51


State 37

	typeopr -> typeop . OPR typeopr                     (rule 52)
	typeopr -> typeop .                                 (rule 53)
	typeop -> typeop . OP typeapp                       (rule 54)

	OP             shift, and enter state 70
	OPR            shift, and enter state 71
	'->'           reduce using rule 53
	'=>'           reduce using rule 53
	')'            reduce using rule 53
	','            reduce using rule 53
	NEWLINE        reduce using rule 53


State 38

	typeop -> typeapp .                                 (rule 55)

	OP             reduce using rule 55
	OPR            reduce using rule 55
	'->'           reduce using rule 55
	'=>'           reduce using rule 55
	')'            reduce using rule 55
	','            reduce using rule 55
	NEWLINE        reduce using rule 55


State 39

	typelistAux -> typelistAux . singletype             (rule 57)
	typelist -> typelistAux .                           (rule 59)

	VAR            shift, and enter state 42
	OP             reduce using rule 59
	OPR            reduce using rule 59
	'|'            reduce using rule 59
	'->'           reduce using rule 59
	'=>'           reduce using rule 59
	')'            reduce using rule 59
	'('            shift, and enter state 43
	','            reduce using rule 59
	NEWLINE        reduce using rule 59

	singletype     goto state 69

State 40

	typeapp -> typelist .                               (rule 56)

	OP             reduce using rule 56
	OPR            reduce using rule 56
	'->'           reduce using rule 56
	'=>'           reduce using rule 56
	')'            reduce using rule 56
	','            reduce using rule 56
	NEWLINE        reduce using rule 56


State 41

	typelistAux -> singletype .                         (rule 58)

	VAR            reduce using rule 58
	OP             reduce using rule 58
	OPR            reduce using rule 58
	'|'            reduce using rule 58
	'->'           reduce using rule 58
	'=>'           reduce using rule 58
	')'            reduce using rule 58
	'('            reduce using rule 58
	','            reduce using rule 58
	NEWLINE        reduce using rule 58


State 42

	singletype -> VAR .                                 (rule 61)

	VAR            reduce using rule 61
	OP             reduce using rule 61
	OPR            reduce using rule 61
	'|'            reduce using rule 61
	'->'           reduce using rule 61
	'=>'           reduce using rule 61
	')'            reduce using rule 61
	'('            reduce using rule 61
	','            reduce using rule 61
	NEWLINE        reduce using rule 61


State 43

	singletype -> '(' . type ')'                        (rule 60)
	singletype -> '(' . ')'                             (rule 62)

	VAR            shift, and enter state 42
	')'            shift, and enter state 68
	'('            shift, and enter state 43

	type           goto state 67
	ftype          goto state 35
	typeopr        goto state 36
	typeop         goto state 37
	typeapp        goto state 38
	typelistAux    goto state 39
	typelist       goto state 40
	singletype     goto state 41

State 44

	varlistAux -> varlistAux . VAR                      (rule 37)
	varlist -> varlistAux .                             (rule 39)

	VAR            shift, and enter state 66
	'='            reduce using rule 39
	'=>'           reduce using rule 39
	','            reduce using rule 39
	NEWLINE        reduce using rule 39


State 45

	data -> DATA varlist . datarhs                      (rule 65)

	'='            shift, and enter state 64
	NEWLINE        shift, and enter state 65

	datarhs        goto state 63

State 46

	varlistAux -> VAR .                                 (rule 38)

	VAR            reduce using rule 38
	'='            reduce using rule 38
	'=>'           reduce using rule 38
	','            reduce using rule 38
	NEWLINE        reduce using rule 38


State 47

	class -> CLASS constrainedtype . NEWLINE indentedBody    (rule 64)

	NEWLINE        shift, and enter state 62


State 48

	def -> VAR exprlist . '=' rhs                       (rule 11)

	'='            shift, and enter state 61


State 49

	exprlistAux -> single .                             (rule 16)

	VAR            reduce using rule 16
	'='            reduce using rule 16
	'('            reduce using rule 16
	'_'            reduce using rule 16
	INT            reduce using rule 16
	CHAR           reduce using rule 16
	STRING         reduce using rule 16
	FLOAT          reduce using rule 16


State 50

	typesig -> VAR typeannotation . NEWLINE             (rule 40)

	NEWLINE        shift, and enter state 60


State 51

	typeannotation -> ':' . constrainedtype             (rule 42)

	VAR            shift, and enter state 42
	'('            shift, and enter state 43

	constrainedtypegoto state 59
	type           goto state 34
	ftype          goto state 35
	typeopr        goto state 36
	typeop         goto state 37
	typeapp        goto state 38
	typelistAux    goto state 39
	typelist       goto state 40
	singletype     goto state 41

State 52

	def -> VAR '=' . rhs                                (rule 12)

	VAR            shift, and enter state 30
	'('            shift, and enter state 32
	'_'            shift, and enter state 15
	NEWLINE        shift, and enter state 58
	INT            shift, and enter state 16
	CHAR           shift, and enter state 17
	STRING         shift, and enter state 18
	FLOAT          shift, and enter state 19

	rhs            goto state 56
	exprlistAux    goto state 21
	exprlist       goto state 22
	expr           goto state 57
	lambda         goto state 24
	singlelambda   goto state 25
	rightoper      goto state 26
	oper           goto state 27
	app            goto state 28
	single         goto state 29

State 53

	def -> single OP . single '=' rhs                   (rule 13)

	VAR            shift, and enter state 30
	'('            shift, and enter state 32
	'_'            shift, and enter state 15
	INT            shift, and enter state 16
	CHAR           shift, and enter state 17
	STRING         shift, and enter state 18
	FLOAT          shift, and enter state 19

	single         goto state 55

State 54

	body -> body decl .                                 (rule 2)

	VAR            reduce using rule 2
	CLASS          reduce using rule 2
	DATA           reduce using rule 2
	INSTANCE       reduce using rule 2
	'('            reduce using rule 2
	'_'            reduce using rule 2
	DEDENT         reduce using rule 2
	INT            reduce using rule 2
	CHAR           reduce using rule 2
	STRING         reduce using rule 2
	FLOAT          reduce using rule 2
	%eof           reduce using rule 2


State 55

	def -> single OP single . '=' rhs                   (rule 13)

	'='            shift, and enter state 110


State 56

	def -> VAR '=' rhs .                                (rule 12)

	VAR            reduce using rule 12
	CLASS          reduce using rule 12
	DATA           reduce using rule 12
	INSTANCE       reduce using rule 12
	'('            reduce using rule 12
	'_'            reduce using rule 12
	DEDENT         reduce using rule 12
	INT            reduce using rule 12
	CHAR           reduce using rule 12
	STRING         reduce using rule 12
	FLOAT          reduce using rule 12
	%eof           reduce using rule 12


State 57

	rhs -> expr . NEWLINE                               (rule 14)

	NEWLINE        shift, and enter state 109


State 58

	rhs -> NEWLINE . INDENT expr NEWLINE DEDENT         (rule 15)

	INDENT         shift, and enter state 108


State 59

	typeannotation -> ':' constrainedtype .             (rule 42)

	NEWLINE        reduce using rule 42


State 60

	typesig -> VAR typeannotation NEWLINE .             (rule 40)

	VAR            reduce using rule 40
	CLASS          reduce using rule 40
	DATA           reduce using rule 40
	INSTANCE       reduce using rule 40
	'('            reduce using rule 40
	'_'            reduce using rule 40
	DEDENT         reduce using rule 40
	INT            reduce using rule 40
	CHAR           reduce using rule 40
	STRING         reduce using rule 40
	FLOAT          reduce using rule 40
	%eof           reduce using rule 40


State 61

	def -> VAR exprlist '=' . rhs                       (rule 11)

	VAR            shift, and enter state 30
	'('            shift, and enter state 32
	'_'            shift, and enter state 15
	NEWLINE        shift, and enter state 58
	INT            shift, and enter state 16
	CHAR           shift, and enter state 17
	STRING         shift, and enter state 18
	FLOAT          shift, and enter state 19

	rhs            goto state 107
	exprlistAux    goto state 21
	exprlist       goto state 22
	expr           goto state 57
	lambda         goto state 24
	singlelambda   goto state 25
	rightoper      goto state 26
	oper           goto state 27
	app            goto state 28
	single         goto state 29

State 62

	class -> CLASS constrainedtype NEWLINE . indentedBody    (rule 64)

	VAR            reduce using rule 5
	CLASS          reduce using rule 5
	DATA           reduce using rule 5
	INSTANCE       reduce using rule 5
	'('            reduce using rule 5
	'_'            reduce using rule 5
	INDENT         shift, and enter state 91
	DEDENT         reduce using rule 5
	INT            reduce using rule 5
	CHAR           reduce using rule 5
	STRING         reduce using rule 5
	FLOAT          reduce using rule 5
	%eof           reduce using rule 5

	indentedBody   goto state 106

State 63

	data -> DATA varlist datarhs .                      (rule 65)

	VAR            reduce using rule 65
	CLASS          reduce using rule 65
	DATA           reduce using rule 65
	INSTANCE       reduce using rule 65
	'('            reduce using rule 65
	'_'            reduce using rule 65
	DEDENT         reduce using rule 65
	INT            reduce using rule 65
	CHAR           reduce using rule 65
	STRING         reduce using rule 65
	FLOAT          reduce using rule 65
	%eof           reduce using rule 65


State 64

	datarhs -> '=' . constructorsS                      (rule 66)

	VAR            shift, and enter state 104
	NEWLINE        shift, and enter state 105

	constructorsS  goto state 101
	constructorsB  goto state 102
	variant        goto state 103

State 65

	datarhs -> NEWLINE . INDENT '=' constructorsS DEDENT    (rule 67)
	datarhs -> NEWLINE . INDENT gadtconstructors DEDENT    (rule 68)

	INDENT         shift, and enter state 100


State 66

	varlistAux -> varlistAux VAR .                      (rule 37)

	VAR            reduce using rule 37
	'='            reduce using rule 37
	'=>'           reduce using rule 37
	','            reduce using rule 37
	NEWLINE        reduce using rule 37


State 67

	singletype -> '(' type . ')'                        (rule 60)

	')'            shift, and enter state 99


State 68

	singletype -> '(' ')' .                             (rule 62)

	VAR            reduce using rule 62
	OP             reduce using rule 62
	OPR            reduce using rule 62
	'|'            reduce using rule 62
	'->'           reduce using rule 62
	'=>'           reduce using rule 62
	')'            reduce using rule 62
	'('            reduce using rule 62
	','            reduce using rule 62
	NEWLINE        reduce using rule 62


State 69

	typelistAux -> typelistAux singletype .             (rule 57)

	VAR            reduce using rule 57
	OP             reduce using rule 57
	OPR            reduce using rule 57
	'|'            reduce using rule 57
	'->'           reduce using rule 57
	'=>'           reduce using rule 57
	')'            reduce using rule 57
	'('            reduce using rule 57
	','            reduce using rule 57
	NEWLINE        reduce using rule 57


State 70

	typeop -> typeop OP . typeapp                       (rule 54)

	VAR            shift, and enter state 42
	'('            shift, and enter state 43

	typeapp        goto state 98
	typelistAux    goto state 39
	typelist       goto state 40
	singletype     goto state 41

State 71

	typeopr -> typeop OPR . typeopr                     (rule 52)

	VAR            shift, and enter state 42
	'('            shift, and enter state 43

	typeopr        goto state 97
	typeop         goto state 37
	typeapp        goto state 38
	typelistAux    goto state 39
	typelist       goto state 40
	singletype     goto state 41

State 72

	ftype -> typeopr '->' . ftype                       (rule 50)

	VAR            shift, and enter state 42
	'('            shift, and enter state 43

	ftype          goto state 96
	typeopr        goto state 36
	typeop         goto state 37
	typeapp        goto state 38
	typelistAux    goto state 39
	typelist       goto state 40
	singletype     goto state 41

State 73

	constrainedtype -> type '=>' . type                 (rule 48)

	VAR            shift, and enter state 42
	'('            shift, and enter state 43

	type           goto state 95
	ftype          goto state 35
	typeopr        goto state 36
	typeop         goto state 37
	typeapp        goto state 38
	typelistAux    goto state 39
	typelist       goto state 40
	singletype     goto state 41

State 74

	constrainedtype -> type ',' . constraintlist '=>' type    (rule 47)

	VAR            shift, and enter state 46

	varlistAux     goto state 44
	varlist        goto state 92
	constraintlist goto state 93
	constraint     goto state 94

State 75

	instance -> INSTANCE constrainedtype NEWLINE . indentedBody    (rule 63)

	VAR            reduce using rule 5
	CLASS          reduce using rule 5
	DATA           reduce using rule 5
	INSTANCE       reduce using rule 5
	'('            reduce using rule 5
	'_'            reduce using rule 5
	INDENT         shift, and enter state 91
	DEDENT         reduce using rule 5
	INT            reduce using rule 5
	CHAR           reduce using rule 5
	STRING         reduce using rule 5
	FLOAT          reduce using rule 5
	%eof           reduce using rule 5

	indentedBody   goto state 90

State 76

	single -> '(' OP . ')'                              (rule 30)

	')'            shift, and enter state 89


State 77

	single -> '(' OP ')' .                              (rule 30)
	typesig -> '(' OP ')' . typeannotation NEWLINE      (rule 41)

	OP             reduce using rule 30
	':'            shift, and enter state 51

	typeannotation goto state 88

State 78

	app -> app single .                                 (rule 28)

	VAR            reduce using rule 28
	OP             reduce using rule 28
	OPR            reduce using rule 28
	')'            reduce using rule 28
	'('            reduce using rule 28
	'_'            reduce using rule 28
	NEWLINE        reduce using rule 28
	INT            reduce using rule 28
	CHAR           reduce using rule 28
	STRING         reduce using rule 28
	FLOAT          reduce using rule 28


State 79

	oper -> oper OP . app                               (rule 25)

	VAR            shift, and enter state 30
	'('            shift, and enter state 32
	'_'            shift, and enter state 15
	INT            shift, and enter state 16
	CHAR           shift, and enter state 17
	STRING         shift, and enter state 18
	FLOAT          shift, and enter state 19

	app            goto state 87
	single         goto state 86

State 80

	rightoper -> oper OPR . rightoper                   (rule 23)

	VAR            shift, and enter state 30
	'('            shift, and enter state 32
	'_'            shift, and enter state 15
	INT            shift, and enter state 16
	CHAR           shift, and enter state 17
	STRING         shift, and enter state 18
	FLOAT          shift, and enter state 19

	rightoper      goto state 85
	oper           goto state 27
	app            goto state 28
	single         goto state 86

State 81

	single -> '(' expr ')' .                            (rule 29)

	VAR            reduce using rule 29
	OP             reduce using rule 29
	OPR            reduce using rule 29
	'='            reduce using rule 29
	'=>'           reduce using rule 29
	')'            reduce using rule 29
	'('            reduce using rule 29
	'_'            reduce using rule 29
	NEWLINE        reduce using rule 29
	INT            reduce using rule 29
	CHAR           reduce using rule 29
	STRING         reduce using rule 29
	FLOAT          reduce using rule 29


State 82

	singlelambda -> exprlist '=>' . expr                (rule 21)

	VAR            shift, and enter state 30
	'('            shift, and enter state 32
	'_'            shift, and enter state 15
	INT            shift, and enter state 16
	CHAR           shift, and enter state 17
	STRING         shift, and enter state 18
	FLOAT          shift, and enter state 19

	exprlistAux    goto state 21
	exprlist       goto state 22
	expr           goto state 84
	lambda         goto state 24
	singlelambda   goto state 25
	rightoper      goto state 26
	oper           goto state 27
	app            goto state 28
	single         goto state 29

State 83

	exprlistAux -> exprlistAux single .                 (rule 17)

	VAR            reduce using rule 17
	'='            reduce using rule 17
	'=>'           reduce using rule 17
	'('            reduce using rule 17
	'_'            reduce using rule 17
	INT            reduce using rule 17
	CHAR           reduce using rule 17
	STRING         reduce using rule 17
	FLOAT          reduce using rule 17


State 84

	singlelambda -> exprlist '=>' expr .                (rule 21)

	')'            reduce using rule 21
	NEWLINE        reduce using rule 21


State 85

	rightoper -> oper OPR rightoper .                   (rule 23)

	')'            reduce using rule 23
	NEWLINE        reduce using rule 23


State 86

	app -> single .                                     (rule 27)

	VAR            reduce using rule 27
	OP             reduce using rule 27
	OPR            reduce using rule 27
	')'            reduce using rule 27
	'('            reduce using rule 27
	'_'            reduce using rule 27
	NEWLINE        reduce using rule 27
	INT            reduce using rule 27
	CHAR           reduce using rule 27
	STRING         reduce using rule 27
	FLOAT          reduce using rule 27


State 87

	oper -> oper OP app .                               (rule 25)
	app -> app . single                                 (rule 28)

	VAR            shift, and enter state 30
	OP             reduce using rule 25
	OPR            reduce using rule 25
	')'            reduce using rule 25
	'('            shift, and enter state 32
	'_'            shift, and enter state 15
	NEWLINE        reduce using rule 25
	INT            shift, and enter state 16
	CHAR           shift, and enter state 17
	STRING         shift, and enter state 18
	FLOAT          shift, and enter state 19

	single         goto state 78

State 88

	typesig -> '(' OP ')' typeannotation . NEWLINE      (rule 41)

	NEWLINE        shift, and enter state 126


State 89

	single -> '(' OP ')' .                              (rule 30)

	VAR            reduce using rule 30
	OP             reduce using rule 30
	OPR            reduce using rule 30
	'='            reduce using rule 30
	'=>'           reduce using rule 30
	')'            reduce using rule 30
	'('            reduce using rule 30
	'_'            reduce using rule 30
	NEWLINE        reduce using rule 30
	INT            reduce using rule 30
	CHAR           reduce using rule 30
	STRING         reduce using rule 30
	FLOAT          reduce using rule 30


State 90

	instance -> INSTANCE constrainedtype NEWLINE indentedBody .    (rule 63)

	VAR            reduce using rule 63
	CLASS          reduce using rule 63
	DATA           reduce using rule 63
	INSTANCE       reduce using rule 63
	'('            reduce using rule 63
	'_'            reduce using rule 63
	DEDENT         reduce using rule 63
	INT            reduce using rule 63
	CHAR           reduce using rule 63
	STRING         reduce using rule 63
	FLOAT          reduce using rule 63
	%eof           reduce using rule 63


State 91

	indentedBody -> INDENT . body DEDENT                (rule 4)

	VAR            shift, and enter state 10
	CLASS          shift, and enter state 11
	DATA           shift, and enter state 12
	INSTANCE       shift, and enter state 13
	'('            shift, and enter state 14
	'_'            shift, and enter state 15
	INT            shift, and enter state 16
	CHAR           shift, and enter state 17
	STRING         shift, and enter state 18
	FLOAT          shift, and enter state 19

	body           goto state 125
	decl           goto state 3
	def            goto state 4
	single         goto state 5
	typesig        goto state 6
	instance       goto state 7
	class          goto state 8
	data           goto state 9

State 92

	constraint -> varlist .                             (rule 45)

	'=>'           reduce using rule 45
	','            reduce using rule 45


State 93

	constrainedtype -> type ',' constraintlist . '=>' type    (rule 47)

	'=>'           shift, and enter state 124


State 94

	constraintlist -> constraint . ',' constraintlist    (rule 43)
	constraintlist -> constraint .                      (rule 44)

	'=>'           reduce using rule 44
	','            shift, and enter state 123


State 95

	constrainedtype -> type '=>' type .                 (rule 48)

	NEWLINE        reduce using rule 48


State 96

	ftype -> typeopr '->' ftype .                       (rule 50)

	'=>'           reduce using rule 50
	')'            reduce using rule 50
	','            reduce using rule 50
	NEWLINE        reduce using rule 50


State 97

	typeopr -> typeop OPR typeopr .                     (rule 52)

	'->'           reduce using rule 52
	'=>'           reduce using rule 52
	')'            reduce using rule 52
	','            reduce using rule 52
	NEWLINE        reduce using rule 52


State 98

	typeop -> typeop OP typeapp .                       (rule 54)

	OP             reduce using rule 54
	OPR            reduce using rule 54
	'->'           reduce using rule 54
	'=>'           reduce using rule 54
	')'            reduce using rule 54
	','            reduce using rule 54
	NEWLINE        reduce using rule 54


State 99

	singletype -> '(' type ')' .                        (rule 60)

	VAR            reduce using rule 60
	OP             reduce using rule 60
	OPR            reduce using rule 60
	'|'            reduce using rule 60
	'->'           reduce using rule 60
	'=>'           reduce using rule 60
	')'            reduce using rule 60
	'('            reduce using rule 60
	','            reduce using rule 60
	NEWLINE        reduce using rule 60


State 100

	datarhs -> NEWLINE INDENT . '=' constructorsS DEDENT    (rule 67)
	datarhs -> NEWLINE INDENT . gadtconstructors DEDENT    (rule 68)

	VAR            shift, and enter state 120
	'='            shift, and enter state 121
	'('            shift, and enter state 122

	typesig        goto state 117
	gadtconstructorsgoto state 118
	gadtconstructorgoto state 119

State 101

	datarhs -> '=' constructorsS .                      (rule 66)

	VAR            reduce using rule 66
	CLASS          reduce using rule 66
	DATA           reduce using rule 66
	INSTANCE       reduce using rule 66
	'('            reduce using rule 66
	'_'            reduce using rule 66
	DEDENT         reduce using rule 66
	INT            reduce using rule 66
	CHAR           reduce using rule 66
	STRING         reduce using rule 66
	FLOAT          reduce using rule 66
	%eof           reduce using rule 66


State 102

	constructorsS -> constructorsB . NEWLINE INDENT '|' constructorsS DEDENT    (rule 72)
	constructorsS -> constructorsB . NEWLINE '|' constructorsS    (rule 73)
	constructorsS -> constructorsB . NEWLINE            (rule 74)
	constructorsB -> constructorsB . '|' variant        (rule 75)

	'|'            shift, and enter state 115
	NEWLINE        shift, and enter state 116


State 103

	constructorsB -> variant .                          (rule 76)

	'|'            reduce using rule 76
	NEWLINE        reduce using rule 76


State 104

	variant -> VAR . typelist                           (rule 77)
	variant -> VAR .                                    (rule 78)

	VAR            shift, and enter state 42
	'|'            reduce using rule 78
	'('            shift, and enter state 43
	NEWLINE        reduce using rule 78

	typelistAux    goto state 39
	typelist       goto state 114
	singletype     goto state 41

State 105

	constructorsS -> NEWLINE . INDENT constructorsB NEWLINE '|' constructorsS DEDENT    (rule 69)
	constructorsS -> NEWLINE . INDENT constructorsB NEWLINE INDENT '|' constructorsS DEDENT DEDENT    (rule 70)
	constructorsS -> NEWLINE . INDENT constructorsB NEWLINE DEDENT    (rule 71)

	INDENT         shift, and enter state 113


State 106

	class -> CLASS constrainedtype NEWLINE indentedBody .    (rule 64)

	VAR            reduce using rule 64
	CLASS          reduce using rule 64
	DATA           reduce using rule 64
	INSTANCE       reduce using rule 64
	'('            reduce using rule 64
	'_'            reduce using rule 64
	DEDENT         reduce using rule 64
	INT            reduce using rule 64
	CHAR           reduce using rule 64
	STRING         reduce using rule 64
	FLOAT          reduce using rule 64
	%eof           reduce using rule 64


State 107

	def -> VAR exprlist '=' rhs .                       (rule 11)

	VAR            reduce using rule 11
	CLASS          reduce using rule 11
	DATA           reduce using rule 11
	INSTANCE       reduce using rule 11
	'('            reduce using rule 11
	'_'            reduce using rule 11
	DEDENT         reduce using rule 11
	INT            reduce using rule 11
	CHAR           reduce using rule 11
	STRING         reduce using rule 11
	FLOAT          reduce using rule 11
	%eof           reduce using rule 11


State 108

	rhs -> NEWLINE INDENT . expr NEWLINE DEDENT         (rule 15)

	VAR            shift, and enter state 30
	'('            shift, and enter state 32
	'_'            shift, and enter state 15
	INT            shift, and enter state 16
	CHAR           shift, and enter state 17
	STRING         shift, and enter state 18
	FLOAT          shift, and enter state 19

	exprlistAux    goto state 21
	exprlist       goto state 22
	expr           goto state 112
	lambda         goto state 24
	singlelambda   goto state 25
	rightoper      goto state 26
	oper           goto state 27
	app            goto state 28
	single         goto state 29

State 109

	rhs -> expr NEWLINE .                               (rule 14)

	VAR            reduce using rule 14
	CLASS          reduce using rule 14
	DATA           reduce using rule 14
	INSTANCE       reduce using rule 14
	'('            reduce using rule 14
	'_'            reduce using rule 14
	DEDENT         reduce using rule 14
	INT            reduce using rule 14
	CHAR           reduce using rule 14
	STRING         reduce using rule 14
	FLOAT          reduce using rule 14
	%eof           reduce using rule 14


State 110

	def -> single OP single '=' . rhs                   (rule 13)

	VAR            shift, and enter state 30
	'('            shift, and enter state 32
	'_'            shift, and enter state 15
	NEWLINE        shift, and enter state 58
	INT            shift, and enter state 16
	CHAR           shift, and enter state 17
	STRING         shift, and enter state 18
	FLOAT          shift, and enter state 19

	rhs            goto state 111
	exprlistAux    goto state 21
	exprlist       goto state 22
	expr           goto state 57
	lambda         goto state 24
	singlelambda   goto state 25
	rightoper      goto state 26
	oper           goto state 27
	app            goto state 28
	single         goto state 29

State 111

	def -> single OP single '=' rhs .                   (rule 13)

	VAR            reduce using rule 13
	CLASS          reduce using rule 13
	DATA           reduce using rule 13
	INSTANCE       reduce using rule 13
	'('            reduce using rule 13
	'_'            reduce using rule 13
	DEDENT         reduce using rule 13
	INT            reduce using rule 13
	CHAR           reduce using rule 13
	STRING         reduce using rule 13
	FLOAT          reduce using rule 13
	%eof           reduce using rule 13


State 112

	rhs -> NEWLINE INDENT expr . NEWLINE DEDENT         (rule 15)

	NEWLINE        shift, and enter state 138


State 113

	constructorsS -> NEWLINE INDENT . constructorsB NEWLINE '|' constructorsS DEDENT    (rule 69)
	constructorsS -> NEWLINE INDENT . constructorsB NEWLINE INDENT '|' constructorsS DEDENT DEDENT    (rule 70)
	constructorsS -> NEWLINE INDENT . constructorsB NEWLINE DEDENT    (rule 71)

	VAR            shift, and enter state 104

	constructorsB  goto state 137
	variant        goto state 103

State 114

	variant -> VAR typelist .                           (rule 77)

	'|'            reduce using rule 77
	NEWLINE        reduce using rule 77


State 115

	constructorsB -> constructorsB '|' . variant        (rule 75)

	VAR            shift, and enter state 104

	variant        goto state 136

State 116

	constructorsS -> constructorsB NEWLINE . INDENT '|' constructorsS DEDENT    (rule 72)
	constructorsS -> constructorsB NEWLINE . '|' constructorsS    (rule 73)
	constructorsS -> constructorsB NEWLINE .            (rule 74)

	VAR            reduce using rule 74
	CLASS          reduce using rule 74
	DATA           reduce using rule 74
	INSTANCE       reduce using rule 74
	'|'            shift, and enter state 134
	'('            reduce using rule 74
	'_'            reduce using rule 74
	INDENT         shift, and enter state 135
	DEDENT         reduce using rule 74
	INT            reduce using rule 74
	CHAR           reduce using rule 74
	STRING         reduce using rule 74
	FLOAT          reduce using rule 74
	%eof           reduce using rule 74


State 117

	gadtconstructor -> typesig .                        (rule 81)

	VAR            reduce using rule 81
	'('            reduce using rule 81
	DEDENT         reduce using rule 81


State 118

	datarhs -> NEWLINE INDENT gadtconstructors . DEDENT    (rule 68)
	gadtconstructors -> gadtconstructors . gadtconstructor    (rule 80)

	VAR            shift, and enter state 120
	'('            shift, and enter state 122
	DEDENT         shift, and enter state 133

	typesig        goto state 117
	gadtconstructorgoto state 132

State 119

	gadtconstructors -> gadtconstructor .               (rule 79)

	VAR            reduce using rule 79
	'('            reduce using rule 79
	DEDENT         reduce using rule 79


State 120

	typesig -> VAR . typeannotation NEWLINE             (rule 40)

	':'            shift, and enter state 51

	typeannotation goto state 50

State 121

	datarhs -> NEWLINE INDENT '=' . constructorsS DEDENT    (rule 67)

	VAR            shift, and enter state 104
	NEWLINE        shift, and enter state 105

	constructorsS  goto state 131
	constructorsB  goto state 102
	variant        goto state 103

State 122

	typesig -> '(' . OP ')' typeannotation NEWLINE      (rule 41)

	OP             shift, and enter state 130


State 123

	constraintlist -> constraint ',' . constraintlist    (rule 43)

	VAR            shift, and enter state 46

	varlistAux     goto state 44
	varlist        goto state 92
	constraintlist goto state 129
	constraint     goto state 94

State 124

	constrainedtype -> type ',' constraintlist '=>' . type    (rule 47)

	VAR            shift, and enter state 42
	'('            shift, and enter state 43

	type           goto state 128
	ftype          goto state 35
	typeopr        goto state 36
	typeop         goto state 37
	typeapp        goto state 38
	typelistAux    goto state 39
	typelist       goto state 40
	singletype     goto state 41

State 125

	body -> body . decl                                 (rule 2)
	indentedBody -> INDENT body . DEDENT                (rule 4)

	VAR            shift, and enter state 10
	CLASS          shift, and enter state 11
	DATA           shift, and enter state 12
	INSTANCE       shift, and enter state 13
	'('            shift, and enter state 14
	'_'            shift, and enter state 15
	DEDENT         shift, and enter state 127
	INT            shift, and enter state 16
	CHAR           shift, and enter state 17
	STRING         shift, and enter state 18
	FLOAT          shift, and enter state 19

	decl           goto state 54
	def            goto state 4
	single         goto state 5
	typesig        goto state 6
	instance       goto state 7
	class          goto state 8
	data           goto state 9

State 126

	typesig -> '(' OP ')' typeannotation NEWLINE .      (rule 41)

	VAR            reduce using rule 41
	CLASS          reduce using rule 41
	DATA           reduce using rule 41
	INSTANCE       reduce using rule 41
	'('            reduce using rule 41
	'_'            reduce using rule 41
	DEDENT         reduce using rule 41
	INT            reduce using rule 41
	CHAR           reduce using rule 41
	STRING         reduce using rule 41
	FLOAT          reduce using rule 41
	%eof           reduce using rule 41


State 127

	indentedBody -> INDENT body DEDENT .                (rule 4)

	VAR            reduce using rule 4
	CLASS          reduce using rule 4
	DATA           reduce using rule 4
	INSTANCE       reduce using rule 4
	'('            reduce using rule 4
	'_'            reduce using rule 4
	DEDENT         reduce using rule 4
	INT            reduce using rule 4
	CHAR           reduce using rule 4
	STRING         reduce using rule 4
	FLOAT          reduce using rule 4
	%eof           reduce using rule 4


State 128

	constrainedtype -> type ',' constraintlist '=>' type .    (rule 47)

	NEWLINE        reduce using rule 47


State 129

	constraintlist -> constraint ',' constraintlist .    (rule 43)

	'=>'           reduce using rule 43


State 130

	typesig -> '(' OP . ')' typeannotation NEWLINE      (rule 41)

	')'            shift, and enter state 144


State 131

	datarhs -> NEWLINE INDENT '=' constructorsS . DEDENT    (rule 67)

	DEDENT         shift, and enter state 143


State 132

	gadtconstructors -> gadtconstructors gadtconstructor .    (rule 80)

	VAR            reduce using rule 80
	'('            reduce using rule 80
	DEDENT         reduce using rule 80


State 133

	datarhs -> NEWLINE INDENT gadtconstructors DEDENT .    (rule 68)

	VAR            reduce using rule 68
	CLASS          reduce using rule 68
	DATA           reduce using rule 68
	INSTANCE       reduce using rule 68
	'('            reduce using rule 68
	'_'            reduce using rule 68
	DEDENT         reduce using rule 68
	INT            reduce using rule 68
	CHAR           reduce using rule 68
	STRING         reduce using rule 68
	FLOAT          reduce using rule 68
	%eof           reduce using rule 68


State 134

	constructorsS -> constructorsB NEWLINE '|' . constructorsS    (rule 73)

	VAR            shift, and enter state 104
	NEWLINE        shift, and enter state 105

	constructorsS  goto state 142
	constructorsB  goto state 102
	variant        goto state 103

State 135

	constructorsS -> constructorsB NEWLINE INDENT . '|' constructorsS DEDENT    (rule 72)

	'|'            shift, and enter state 141


State 136

	constructorsB -> constructorsB '|' variant .        (rule 75)

	'|'            reduce using rule 75
	NEWLINE        reduce using rule 75


State 137

	constructorsS -> NEWLINE INDENT constructorsB . NEWLINE '|' constructorsS DEDENT    (rule 69)
	constructorsS -> NEWLINE INDENT constructorsB . NEWLINE INDENT '|' constructorsS DEDENT DEDENT    (rule 70)
	constructorsS -> NEWLINE INDENT constructorsB . NEWLINE DEDENT    (rule 71)
	constructorsB -> constructorsB . '|' variant        (rule 75)

	'|'            shift, and enter state 115
	NEWLINE        shift, and enter state 140


State 138

	rhs -> NEWLINE INDENT expr NEWLINE . DEDENT         (rule 15)

	DEDENT         shift, and enter state 139


State 139

	rhs -> NEWLINE INDENT expr NEWLINE DEDENT .         (rule 15)

	VAR            reduce using rule 15
	CLASS          reduce using rule 15
	DATA           reduce using rule 15
	INSTANCE       reduce using rule 15
	'('            reduce using rule 15
	'_'            reduce using rule 15
	DEDENT         reduce using rule 15
	INT            reduce using rule 15
	CHAR           reduce using rule 15
	STRING         reduce using rule 15
	FLOAT          reduce using rule 15
	%eof           reduce using rule 15


State 140

	constructorsS -> NEWLINE INDENT constructorsB NEWLINE . '|' constructorsS DEDENT    (rule 69)
	constructorsS -> NEWLINE INDENT constructorsB NEWLINE . INDENT '|' constructorsS DEDENT DEDENT    (rule 70)
	constructorsS -> NEWLINE INDENT constructorsB NEWLINE . DEDENT    (rule 71)

	'|'            shift, and enter state 146
	INDENT         shift, and enter state 147
	DEDENT         shift, and enter state 148


State 141

	constructorsS -> constructorsB NEWLINE INDENT '|' . constructorsS DEDENT    (rule 72)

	VAR            shift, and enter state 104
	NEWLINE        shift, and enter state 105

	constructorsS  goto state 145
	constructorsB  goto state 102
	variant        goto state 103

State 142

	constructorsS -> constructorsB NEWLINE '|' constructorsS .    (rule 73)

	VAR            reduce using rule 73
	CLASS          reduce using rule 73
	DATA           reduce using rule 73
	INSTANCE       reduce using rule 73
	'('            reduce using rule 73
	'_'            reduce using rule 73
	DEDENT         reduce using rule 73
	INT            reduce using rule 73
	CHAR           reduce using rule 73
	STRING         reduce using rule 73
	FLOAT          reduce using rule 73
	%eof           reduce using rule 73


State 143

	datarhs -> NEWLINE INDENT '=' constructorsS DEDENT .    (rule 67)

	VAR            reduce using rule 67
	CLASS          reduce using rule 67
	DATA           reduce using rule 67
	INSTANCE       reduce using rule 67
	'('            reduce using rule 67
	'_'            reduce using rule 67
	DEDENT         reduce using rule 67
	INT            reduce using rule 67
	CHAR           reduce using rule 67
	STRING         reduce using rule 67
	FLOAT          reduce using rule 67
	%eof           reduce using rule 67


State 144

	typesig -> '(' OP ')' . typeannotation NEWLINE      (rule 41)

	':'            shift, and enter state 51

	typeannotation goto state 88

State 145

	constructorsS -> constructorsB NEWLINE INDENT '|' constructorsS . DEDENT    (rule 72)

	DEDENT         shift, and enter state 151


State 146

	constructorsS -> NEWLINE INDENT constructorsB NEWLINE '|' . constructorsS DEDENT    (rule 69)

	VAR            shift, and enter state 104
	NEWLINE        shift, and enter state 105

	constructorsS  goto state 150
	constructorsB  goto state 102
	variant        goto state 103

State 147

	constructorsS -> NEWLINE INDENT constructorsB NEWLINE INDENT . '|' constructorsS DEDENT DEDENT    (rule 70)

	'|'            shift, and enter state 149


State 148

	constructorsS -> NEWLINE INDENT constructorsB NEWLINE DEDENT .    (rule 71)

	VAR            reduce using rule 71
	CLASS          reduce using rule 71
	DATA           reduce using rule 71
	INSTANCE       reduce using rule 71
	'('            reduce using rule 71
	'_'            reduce using rule 71
	DEDENT         reduce using rule 71
	INT            reduce using rule 71
	CHAR           reduce using rule 71
	STRING         reduce using rule 71
	FLOAT          reduce using rule 71
	%eof           reduce using rule 71


State 149

	constructorsS -> NEWLINE INDENT constructorsB NEWLINE INDENT '|' . constructorsS DEDENT DEDENT    (rule 70)

	VAR            shift, and enter state 104
	NEWLINE        shift, and enter state 105

	constructorsS  goto state 153
	constructorsB  goto state 102
	variant        goto state 103

State 150

	constructorsS -> NEWLINE INDENT constructorsB NEWLINE '|' constructorsS . DEDENT    (rule 69)

	DEDENT         shift, and enter state 152


State 151

	constructorsS -> constructorsB NEWLINE INDENT '|' constructorsS DEDENT .    (rule 72)

	VAR            reduce using rule 72
	CLASS          reduce using rule 72
	DATA           reduce using rule 72
	INSTANCE       reduce using rule 72
	'('            reduce using rule 72
	'_'            reduce using rule 72
	DEDENT         reduce using rule 72
	INT            reduce using rule 72
	CHAR           reduce using rule 72
	STRING         reduce using rule 72
	FLOAT          reduce using rule 72
	%eof           reduce using rule 72


State 152

	constructorsS -> NEWLINE INDENT constructorsB NEWLINE '|' constructorsS DEDENT .    (rule 69)

	VAR            reduce using rule 69
	CLASS          reduce using rule 69
	DATA           reduce using rule 69
	INSTANCE       reduce using rule 69
	'('            reduce using rule 69
	'_'            reduce using rule 69
	DEDENT         reduce using rule 69
	INT            reduce using rule 69
	CHAR           reduce using rule 69
	STRING         reduce using rule 69
	FLOAT          reduce using rule 69
	%eof           reduce using rule 69


State 153

	constructorsS -> NEWLINE INDENT constructorsB NEWLINE INDENT '|' constructorsS . DEDENT DEDENT    (rule 70)

	DEDENT         shift, and enter state 154


State 154

	constructorsS -> NEWLINE INDENT constructorsB NEWLINE INDENT '|' constructorsS DEDENT . DEDENT    (rule 70)

	DEDENT         shift, and enter state 155


State 155

	constructorsS -> NEWLINE INDENT constructorsB NEWLINE INDENT '|' constructorsS DEDENT DEDENT .    (rule 70)

	VAR            reduce using rule 70
	CLASS          reduce using rule 70
	DATA           reduce using rule 70
	INSTANCE       reduce using rule 70
	'('            reduce using rule 70
	'_'            reduce using rule 70
	DEDENT         reduce using rule 70
	INT            reduce using rule 70
	CHAR           reduce using rule 70
	STRING         reduce using rule 70
	FLOAT          reduce using rule 70
	%eof           reduce using rule 70


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 82
Number of terminals: 30
Number of non-terminals: 40
Number of states: 156
